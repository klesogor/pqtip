/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pqtip;
import org.junit.Assert;
import org.junit.Test;
import pqtip.cipher_suite.PrototypeCipherSuiteProvider;
import pqtip.connection.BlockingSocketAdapter;
import pqtip.connection.PQTIPConnection;
import pqtip.protocol.ConnectionFactory;

import java.io.Console;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import static org.junit.Assert.*;

public class PqtipTcpTest {
    @Test public void testExchangePerformance() throws IOException, InterruptedException {
        System.out.println("Enter test message to be sent. Keep in mind that it will be trimmed to 256 characters");
        var message =  System.console().readLine();
        this.runServer(message);
        Thread.sleep(1000);
        System.out.println("Testing performance for PQTIP SIDH_NH_AES");
        var factory = new ConnectionFactory(new PrototypeCipherSuiteProvider());
        long total = 0;
        long start = System.nanoTime();

        var client = new Socket("127.0.0.1", 8787);
        var encClient = factory.secureClientConnection(new BlockingSocketAdapter(client));
        encClient.send("PQTIPs first message".getBytes());
        long end = System.nanoTime();
        long duration = end - start;
        System.out.println(String.format("Run %d: executed in %d nanoseconds", 1, duration));
        var data = encClient.receive();
        System.out.println(String.format("[Client] Received %d bytes of data", data.length));
        System.out.println(String.format("[Client] Received message: %s", new String(data)));
        Assert.assertEquals(new String(data), message);
        client.close();
    }

    private void runServer(String message) throws IOException {
        new Thread(() -> {
            try {
                var serverSocket = new ServerSocket(8787);
                var factory = new ConnectionFactory(new PrototypeCipherSuiteProvider());
                while(true) {
                    var clientSocket = serverSocket.accept();
                    var encryptedSocket = factory.secureServerConnection(new BlockingSocketAdapter(clientSocket));
                    var data = encryptedSocket.receive();
                    System.out.println(String.format("[Server] Received %d bytes of data", data.length));
                    System.out.println(String.format("[Server] Received message: %s", new String(data)));
                    Assert.assertEquals(new String(data), message);
                    encryptedSocket.send(data);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }
}
